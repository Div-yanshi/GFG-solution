class Solution {
    // Function to count inversions in the array.
    static int inversionCount(int arr[]) {
            
   
     return mergesort(arr,0,arr.length-1);
           
    }
    private static int mergesort(int arr[],int low,int high)
    {
        int cnt=0;
        if(low>=high)
        return cnt;
        int mid=(low+high)/2;
        
       cnt+= mergesort(arr,low,mid);
       cnt+= mergesort(arr,mid+1,high);
       cnt+=merge(arr,low,mid,high);
       return cnt;
    }
    private static int merge(int arr[],int low,int mid,int high)
    { int cnt=0;
        int left=low,right=mid+1;
        ArrayList<Integer> temp=new ArrayList<>();
        while(left<=mid && right<=high)
        {
            if(arr[left]<=arr[right])
            {
                temp.add(arr[left]);
                left++;
            }
            else
            {
                temp.add(arr[right]);
                cnt+=(mid-left +1);
                right++;
            }
            
        }
        while(left<=mid)
        {
            temp.add(arr[left]);
            left++;
        }
        while(right<=high)
        {
            temp.add(arr[right]);
            right++;
        }
        for(int i=low;i<=high;i++)
        arr[i]=temp.get(i-low);
        return cnt;
        
        
    }
    
}
