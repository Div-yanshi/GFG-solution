class Solution {
    // Function to flatten a linked list
    Node flatten(Node root) {
        if(root == null || root.next==null)
        return root;
        Node mer=flatten(root.next);
        return (merge(root,mer));
        // code here
    }
    private static Node merge(Node l1, Node l2){
        Node dummy=new Node(-1);
        Node ll=dummy;
        while(l1!=null && l2!=null){
            if(l1.data<=l2.data){
                ll.bottom=l1;
                ll=ll.bottom;
                l1=l1.bottom;
            }
            else
            {
                ll.bottom=l2;
                ll=ll.bottom;
                l2=l2.bottom;
            }}
            while(l1!=null){
                ll.bottom=l1;
                ll=ll.bottom;
                l1=l1.bottom;
            }
            while(l2!=null)
            {
                ll.bottom=l2;
                ll=ll.bottom;
                l2=l2.bottom;
            }
        return dummy.bottom;
        
    }
}
